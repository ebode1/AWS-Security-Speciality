Overview
Start lab

Task 1: Review your Amazon S3 access policies



Task 2: Connect to your Amazon Linux EC2 instance




Task 3: Enable AWS Config to monitor your Amazon S3 buckets

aws configservice put-configuration-recorder \
--recording-group allSupported=false,includeGlobalResourceTypes=\
false,resourceTypes=AWS::S3::Bucket \
--configuration-recorder name=default,roleARN=<ConfigRoleARN>


aws configservice put-delivery-channel \
--delivery-channel configSnapshotDeliveryProperties=\
{deliveryFrequency=Twelve_Hours},name=default,\
s3BucketName=<ConfigS3BucketName>,\
snsTopicARN=<ConfigSNSTopic>

labstack-0cb3007b-e980-4376-a37f-886-configbucket-1amn81b3odpk
arn:aws:sns:us-east-1:265324299558:LabStack-0cb3007b-e980-4376-a37f-88625f8b6e7c-bCkzz1MepdiuG5ttDehzCC-1-ConfigSNSTopic-Dn0qCHm3WeqT

aws configservice put-delivery-channel \
--delivery-channel configSnapshotDeliveryProperties=\
{deliveryFrequency=Twelve_Hours},name=default,\
s3BucketName=labstack-0cb3007b-e980-4376-a37f-886-configbucket-1amn81b3odpk,\
snsTopicARN=arn:aws:sns:us-east-1:265324299558:LabStack-0cb3007b-e980-4376-a37f-88625f8b6e7c-bCkzz1MepdiuG5ttDehzCC-1-ConfigSNSTopic-Dn0qCHm3WeqT


aws configservice start-configuration-recorder --configuration-recorder-name default


Task 4: Create and configure AWS Config rules

cat <<EOF > S3ProhibitPublicReadAccess.json
{
  "ConfigRuleName": "S3PublicReadProhibited",
  "Description": "Checks that your S3 buckets do not allow public read access. If an S3 bucket policy or bucket ACL allows public read access, the bucket is noncompliant.",
  "Scope": {
    "ComplianceResourceTypes": [
      "AWS::S3::Bucket"
    ]
  },
  "Source": {
    "Owner": "AWS",
    "SourceIdentifier": "S3_BUCKET_PUBLIC_READ_PROHIBITED"
  }
}
EOF


cat <<EOF > S3ProhibitPublicWriteAccess.json
{
  "ConfigRuleName": "S3PublicWriteProhibited",
  "Description": "Checks that your S3 buckets do not allow public write access. If an S3 bucket policy or bucket ACL allows public write access, the bucket is noncompliant.",
  "Scope": {
    "ComplianceResourceTypes": [
      "AWS::S3::Bucket"
    ]
  },
  "Source": {
    "Owner": "AWS",
    "SourceIdentifier": "S3_BUCKET_PUBLIC_WRITE_PROHIBITED"
  }
}
EOF

aws configservice put-config-rule --config-rule file://S3ProhibitPublicReadAccess.json

aws configservice put-config-rule --config-rule file://S3ProhibitPublicWriteAccess.json



Task 5: Create a Lambda function
cat lambda_function.py

zip lambda_function.zip lambda_function.py

aws lambda create-function --function-name RemoveS3PublicAccessDemo \
--runtime "python3.9" --handler lambda_function.lambda_handler \
--zip-file fileb://lambda_function.zip \
--environment Variables={TOPIC_ARN=<ConfigSNSTopic>} \
--role <LambdaRoleARN>

aws lambda create-function --function-name RemoveS3PublicAccessDemo \
--runtime "python3.9" --handler lambda_function.lambda_handler \
--zip-file fileb://lambda_function.zip \
--environment Variables={TOPIC_ARN=arn:aws:sns:us-east-1:265324299558:LabStack-0cb3007b-e980-4376-a37f-88625f8b6e7c-bCkzz1MepdiuG5ttDehzCC-1-ConfigSNSTopic-Dn0qCHm3WeqT} \
--role arn:aws:iam::265324299558:role/LambdaRole


"FunctionArn": "arn:aws:lambda:us-east-1:265324299558:function:RemoveS3PublicAccessDemo",

aws sns subscribe --topic-arn <ConfigSNSTopic> \
--protocol email --notification-endpoint <your-email-address>

aws sns subscribe --topic-arn arn:aws:sns:us-east-1:265324299558:LabStack-0cb3007b-e980-4376-a37f-88625f8b6e7c-bCkzz1MepdiuG5ttDehzCC-1-ConfigSNSTopic-Dn0qCHm3WeqT \
--protocol email --notification-endpoint timothee.ebode.ondoa@accenture.com


Task 6: Create a CloudWatch event
cat <<EOF > CloudWatchEventPattern.json
{
  "source": [
    "aws.config"
  ],
  "detail": {
    "requestParameters": {
      "evaluations": {
        "complianceType": [
          "NON_COMPLIANT"
        ]
      }
    },
    "additionalEventData": {
      "managedRuleIdentifier": [
        "S3_BUCKET_PUBLIC_READ_PROHIBITED",
        "S3_BUCKET_PUBLIC_WRITE_PROHIBITED"
      ]
    }
  }
}
EOF

aws events put-rule --name ConfigNonCompliantS3Event --event-pattern file://CloudWatchEventPattern.json

Rule ARN --> arn:aws:events:us-east-1:265324299558:rule/ConfigNonCompliantS3Event


aws events put-targets --rule ConfigNonCompliantS3Event \
--targets "Id"="Target1","Arn"="<LambdaFunctionARN>" "Id"="Target2","Arn"="<ConfigSNSTopic>"

aws events put-targets --rule ConfigNonCompliantS3Event \
--targets "Id"="Target1","Arn"=arn:aws:lambda:us-east-1:265324299558:function:RemoveS3PublicAccessDemo "Id"="Target2","Arn"=arn:aws:sns:us-east-1:265324299558:LabStack-0cb3007b-e980-4376-a37f-88625f8b6e7c-bCkzz1MepdiuG5ttDehzCC-1-ConfigSNSTopic-Dn0qCHm3WeqT


aws lambda add-permission --function-name RemoveS3PublicAccessDemo \
--statement-id my-scheduled-event --action 'lambda:InvokeFunction' \
--principal events.amazonaws.com --source-arn <rule-arn>

aws lambda add-permission --function-name RemoveS3PublicAccessDemo \
--statement-id my-scheduled-event --action 'lambda:InvokeFunction' \
--principal events.amazonaws.com --source-arn arn:aws:events:us-east-1:265324299558:rule/ConfigNonCompliantS3Event



Task 7: View the results

aws configservice start-config-rules-evaluation \
--config-rule-names S3PublicReadProhibited S3PublicWriteProhibited



